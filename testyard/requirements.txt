TestYard Functional Requirements
================================

1. Allow recruiter members to create a test plan. A test plan could be a series of tests (multiple choices, subjective questions, interviews over a messenger system or an audio/video file/stream containing a set of questions to which the user will need to record/stream the answers and submit, writing code and executing it using an online compiler/interpreter, writing algorithms). Test plans should have a system by which the recruiter can schedule the tests contained in the test plan.

2. Allow recruiter to create a test and schedule it for the candidate(s). Recruiter should be able to schedule the test separately for each candidate. (candidates may be identified using email address). Once a test is scheduled for a set of one or more candidates, a link to the test should be created by the system for each of the candidates (unique links for each candidate). Recruiter should also be able to set a value for the duration of the test. The system should also allow the recruiter (optionally) to set a time limit for each question.

3. The system should be able to email the link for the test (generated by the system) to each of the candidates. The links would be valid for a specified stretch of time and the system should automatically expire them once that period ends. (The recruiter should be able to specify a validity start time and a validity end time for each test link).

4. System should allow the recruiter to enter the correct answers for each question of objective tests, such that the system can automatically assess the tested candidates and email the details of the outcome (for each candidate) to the recruiter (compulsory) and the candidates (optional). Even if a test doesn't have the keys/answers (the recruiter didn't specify one), the system should be able to automatically send the answers entered by the candidate to the recruiter.

5. The system should be able to maintain the test history of the candidates (identified by email id). 

6. The system should automatically create and maintain a question bank for each subject/topic/technology. This will be accessible to the recruiter, and the recruiter should be allowed to pick up questions from this bank and add them to a test.

7. A recruiter should have an registered account on the application. The system should allow the recruiter to create an account, make a financial transaction (necessary for the recruiter to register), login into the account and assess the candidate's answers to a test created by him/her. The system should be able to maintain the session information every time the recruiter logs in. The validity of the registration will be for a predefined period of time only.

8. The system should be capable of tracking time while a candidate takes a test. Once the time is over, the system should terminate the test and the answers entered by the candidate will be automatically dispatched to the recruiter's account/email address. 

9. The system should have a discussion forum and a feedback/support service for use by the recruiters. There should also be a blog where recruiter members can express various thoughts that occur to them. Blogs would be readable by registered members only. To view a blog, the member need not be connected to the blog writer. The blogs will be made searchable by keywords occurring in the blog.

10. The system should have support for computers as well as smart phones (initially there will be support for computers and android phones only. Later, support for iOS and  windows phones will be developed). This will be implented as an API and a frontend component that will use the API to render the content appropriately.

11. The system should be able to provide an online coding environment for certain programming languages/technologies and candidates should be able to actually write code using that and also run the code (both candidates and recruiters would be able to run the code written by candidates).

12. System should have payment gateway integration. It should support credit cards, debit cards and paypal.

13. System should have the means to generate detailed test reports, and it should also let the candidate access it (if the recruiter or test creator/organizing party allows it by marking the test 'public') by clicking on a link. There should not be any authentication required for this. This will allow the candidate to put the link on his/her CV for other recruiters to view. The system will capture audio and video (using a webcam or laptop camera) during the test so that other recruiters can check the validity of the test (that is, whether the candidate has actually taken the test himself/herself or not) by examining the captured info. For 'private' scoped tests, the candidate will simply receive an email (address should be entered by the candidate just before the test starts) message mentioning whether the candidate has passed the test or not and the test score.

14. The system should allow recruiter members to create tests that may be privately shared (with candidates to whom the recruiter wants to share by sending a link to the test) or publicly shared (can be accessed by anyone even without signing in). By default, a test would be privately shareable. A recruiter member should also be allowed to share a privately scoped test with another recruiter member if they are 'connected' to each other. This will be made possible by having a 'share' functionality interface that will list all members who are connected to the  test's creator and a 'Share' button. The test's creator would be able to choose the members with whom he/she wants  to share the test. Clicking on the 'Share' button will perform the action of sharing. An email containing a link to the test will be sent to the members with whom the test has been shared.

15. Recruiter members should be able to do networking among themselves. Members with similar interests can be searched on the website and any such member should be able to send a connect request to another member. The members will be connected to each other once the second member accepts the request sent by the first member.

16. It should be possible to blacklist a recruiter member and block its membership from performing any action on the website by logging in  using the member's account. The system should allow blacklisting of a member for a certain period of time (to be specified at the time of blacklisting) or permanently (the membership account will be permanently cancelled, and the recruiter member would not be able to use that account again).

17. A recruiter member should be able to copy a publicly available test (created by any other member) or a privately shared test (created and shared by a connected member). This will create a duplicate copy of the test under the member who copied it. The member would then be able to make changes to this test and share it with candidates by sending a link to the test to each candidate's email address (the system should take care of this automatically). By default, the copied test will have the same scope as the original test, but the member would be able to modify the scope of this duplicated test.

18. The system should support execution of code in the following programming languages: C, Perl, Python, Ruby, Linux Bash Script, Linux CShell Script, C++, C# (Mono on Linux), Java, Javascript, Lua, Objective-C, PHP, SQL, VB.NET, VBScript, Pascal, Fortran, Lisp, SmallTalk, Scala, Tcl, Ada 95, Delphi and ColdFusion. The system should also allow compilation and building of the source code in all the above languages. It should also support integration of various APIs (like Facebook API, LinkedIn API, various Google APIs, etc). For development on mobiles, a few simulators should also be available. 

19. The system should also support various frameworks (like Django (python), Pylons (python), Class::DBI (perl), Zend (PHP), NodeJS (javascript)) etc.

20. Recruiters can also post projects on this website for freelancers with the requisite skills to bid on them. The recruiter should specify the skill required to do the project, and freelancers/candidates with more than a predefined score in that skill can bid on the project. That way, there will be less number of bidders who are not serious enough for the project.

21. The system should allow for a newsletter to be circulated (at no cost) amongst all members. The system should be able to allow an admin personnel to enter articles, images, files, etc in an UI and compile all that as a PDF file. Finally the system should have a means to schedule automated sending of such a pdf file to its members.

22. The system should have sufficient security such that data pertaining or belonging to the users is never leaked. It should be HTTPS enabled. Passwords should only be transferred over a secure connection and should be encrypted while being passed over the wire.

23. System should be able to display and search tests based on multiple criteria (like job role, free tests, beta tests, etc)

24. System should be able to do keyword search on tests.

25. System should support both free and paid tests.
